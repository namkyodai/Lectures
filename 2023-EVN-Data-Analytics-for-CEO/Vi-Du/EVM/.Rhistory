cukes
carrots
densityplot(bs)
#now make your lovely plot
p <- ggplot(vegLengths, aes(length, fill = veg)) + geom_density(col=NA,alpha = 0)
p <- ggplotly(p)
p
#now make your lovely plot
p <- ggplot(vegLengths, aes(length, fill = veg)) + geom_density(col=NA,alpha = 1)
p <- ggplotly(p)
p
vegLengths
carrots
cukes
#and combine into your new data frame vegLengths
vegLengths <- rbind(carrots, cukes)
#and combine into your new data frame vegLengths
vegLengths <- rbind(carrots, cukes)
#Now, combine your two dataframes into one.  First make a new column in each.
carrots$veg <- 'carrot'
cukes$veg <- 'cuke'
#and combine into your new data frame vegLengths
vegLengths <- rbind(carrots, cukes)
#now make your lovely plot
p <- ggplot(carrots, aes(length, fill = veg)) + geom_density(col=NA,alpha = 0.2)
p <- ggplotly(p)
p
#now make your lovely plot
p <- ggplot(carrots, aes(length)) + geom_density(col=NA,alpha = 0.2)
p
#and combine into your new data frame vegLengths
vegLengths <- rbind(carrots)
#now make your lovely plot
p <- ggplot(carrots, aes(length, fill = veg)) + geom_density(col=NA,alpha = 0.2)
p <- ggplotly(p)
#now make your lovely plot
p <- ggplot(vegLengths, aes(length, fill = veg)) + geom_density(col=NA,alpha = 0.2)
p <- ggplotly(p)
densityplot(bs)
densityplot(bse)
densityplot(bd)
densityplot(bde)
densityplot(ss)
densityplot(sse)
densityplot(sd)
par(mfrow=c(2,2))
densityplot(bs)
densityplot(bse)
densityplot(bd)
densityplot(bde)
par(mfrow=c(2,2))
densityplot(bs)
plot.new()
par(mfrow=c(2,2))
densityplot(bs)
densityplot(bse)
densityplot(bd)
densityplot(bde)
densityplot(ss)
densityplot(sse)
densityplot(sd)
densityplot(sde)
plot.new()
par(mfrow=c(2,2))
plot(bs)
plot(bse)
densityplot(bd)
plot(densityplot(bs))
par(mfrow=c(2,2))
plot(densityplot(bs))
plot.new()
par(mfrow=c(2,2))
plot(densityplot(bs))
dbs=density(bs)
dbse=density(bse)
dbse=density(bse)
dbs=density(bs)
bse <-c(rs[(1:24),11])
density(bse)
plot.new()
par(mfrow=c(2,2))
dbs=density(bs)
plot(dbs)     )
plot(dbs)
bse
dbse=density(bse,na.rm=T)
plot(dbse)
densityplot(bs)
densityplot(bse)
densityplot(bse, xlim="dfd")
densityplot(bse, xlab="dfd")
densityplot(bse, xlab="booster suction elbow")
densityplot(bs, xlab="booster suction")
densityplot(bs, xlab="booster suction")
densityplot(bse, xlab="booster suction elbow")
densityplot(bd,xlab="booster discharge")
densityplot(ss, xlab="storage suction")
densityplot(bde,xlab="booster discharge elbow")
densityplot(sse,, xlab="storage suction elbow")
densityplot(sd, , xlab="storage discharge")
densityplot(sde, , xlab="storage discharge elbow")
install.packages("fmsb")
#radar plot
library(fmsb)
# Create data: note in High school for Jonathan:
data=as.data.frame(matrix( sample( 2:20 , 10 , replace=T) , ncol=10))
data
colnames(data)=c("math" , "english" , "biology" , "music" , "R-coding", "data-viz" , "french" , "physic", "statistic", "sport" )
# To use the fmsb package, I have to add 2 lines to the dataframe: the max and min of each topic to show on the plot!
data=rbind(rep(20,10) , rep(0,10) , data)
data
# The default radar chart proposed by the library:
radarchart(data)
# The default radar chart proposed by the library:
plot.new()
radarchart(data)
library(DBI)
library(RODBC)
library(RMySQL)
library(xts)
library(ggplot2)
library(hydroTSM) #call the hydrology package for time series analysis
pagcordata = dbConnect(MySQL(), user='root', password='', dbname='maynilad_vil', host='localhost')
data = dbConnect(MySQL(), user='root', password='', dbname='maynilad_vil', host='localhost')
dbListTables(data)
dbListFields(data, 'analysisdate')
rs = dbSendQuery(data, "select * from analysisdate")
rs=dbFetch(rs, n = -1)
data=c(rs[2],rs[3],rs[4],rs[5])
a=as.Date(data$date,"%Y-%m-%d")
production=data$total_pro_hour
power=data$total_power_hour
ratio=data$ratio
data=data.frame(a,production,power,ratio)
hydropairs(data[,2:3])
#Plot production data
plot.new()
p=ggplot(data=data,aes(a, production))+ geom_line(color = "#00AFBB") + theme(axis.text.x = element_text(angle = 60,hjust=1))+theme_gray(base_size = 14)+ theme(plot.title = element_text(size=12))
e
data = dbConnect(MySQL(), user='root', password='', dbname='maynilad_vil', host='localhost')
dbListTables(data)
dbListFields(data, 'analysisdate')
rs = dbSendQuery(data, "select * from analysisdate")
rs=dbFetch(rs, n = -1)
rs
data=c(rs[2],rs[7],rs[20],rs[21])
a=as.Date(data$date,"%Y-%m-%d")
production=data$total_pro_hour
power=data$total_power_hour
ratio=data$ratio
data=data.frame(a,production,power,ratio)
hydropairs(data[,2:3])
#Plot production data
plot.new()
p=ggplot(data=data,aes(a, production))+ geom_line(color = "#00AFBB") + theme(axis.text.x = element_text(angle = 60,hjust=1))+theme_gray(base_size = 14)+ theme(plot.title = element_text(size=12))
#p
min <- as.Date("2014-01-01")
#p
min <- as.Date("2014-01-01")
max <-  as.Date("2018-10-31")
#p + scale_x_date(limits = c(min, max))
pp=p+scale_x_date(date_labels = "%Y",date_breaks="year",limits = c(min, max))+labs(title = "Production hourly",x="Years",y="MLD")+scale_y_continuous(limits=c(0,20))#+ stat_smooth(method="lm")
print(pp)
production
max(production)
#p + scale_x_date(limits = c(min, max))
pp=p+scale_x_date(date_labels = "%Y",date_breaks="year",limits = c(min, max))+labs(title = "Production hourly",x="Years",y="MLD")+scale_y_continuous(limits=c(0,10))#+ stat_smooth(method="lm")
print(pp)
min <- as.Date("2014-01-01")
max <-  as.Date("2014-12-30")
#p + scale_x_date(limits = c(min, max))
p+scale_x_date(date_labels = "%m",date_breaks="month",limits = c(min, max))+labs(title = "Production hourly",x="months",y="MLD")+scale_y_continuous(limits=c(0,10))
#p
min <- as.Date("2014-07-01")
max <-  as.Date("2018-10-31")
#p + scale_x_date(limits = c(min, max))
pp=p+scale_x_date(date_labels = "%Y",date_breaks="year",limits = c(min, max))+labs(title = "Production hourly",x="Years",y="MLD")+scale_y_continuous(limits=c(0,10))#+ stat_smooth(method="lm")
print(pp)
min <- as.Date("2014-07-01")
max <-  as.Date("2014-12-30")
#p + scale_x_date(limits = c(min, max))
p+scale_x_date(date_labels = "%m",date_breaks="month",limits = c(min, max))+labs(title = "Production hourly",x="months",y="MLD")+scale_y_continuous(limits=c(0,10))
min <- as.Date("2014-07-01")
max <-  as.Date("2014-12-30")
#p + scale_x_date(limits = c(min, max))
p+scale_x_date(date_labels = "%m",date_breaks="month",limits = c(min, max))+labs(title = "Production hourly",x="months",y="MLD")+scale_y_continuous(limits=c(2.5,5))
#Plot power consumption data
plot.new()
q=ggplot(data=data,aes(a, power))+ geom_line(color = "#00AFBB") + theme(axis.text.x = element_text(angle = 60,hjust=1))+theme_gray(base_size = 14)+ theme(plot.title = element_text(size=12))
#q
min <- as.Date("2014-07-01")
max <-  as.Date("2018-10-31")
q=ggplot(data=data,aes(a, power))+ geom_line(color = "#00AFBB") + theme(axis.text.x = element_text(angle = 60,hjust=1))+theme_gray(base_size = 14)+ theme(plot.title = element_text(size=12))
#q
min <- as.Date("2014-07-01")
max <-  as.Date("2018-10-31")
#p + scale_x_date(limits = c(min, max))
qq=q+scale_x_date(date_labels = "%Y",date_breaks="year",limits = c(min, max))+labs(title = "Power hourly",x="Years",y="KW")+scale_y_continuous(limits=c(0,2500))#+ stat_smooth(method="lm")
print(qq)
#p + scale_x_date(limits = c(min, max))
qq=q+scale_x_date(date_labels = "%Y",date_breaks="year",limits = c(min, max))+labs(title = "Power hourly",x="Years",y="KW")+scale_y_continuous(limits=c(0,1500))#+ stat_smooth(method="lm")
print(qq)
plot.new()
w=ggplot(data=data,aes(a, ratio))+ geom_line(color = "#00AFBB") + theme(axis.text.x = element_text(angle = 60,hjust=1))+theme_gray(base_size = 14)+ theme(plot.title = element_text(size=12))
#w
min <- as.Date("2014-07-01")
max <-  as.Date("2018-19-31")
#p + scale_x_date(limits = c(min, max))
ww=w+scale_x_date(date_labels = "%Y",date_breaks="year",limits = c(min, max))+labs(title = "Ratio",x="Years",y="")+scale_y_continuous(limits=c(0,250))#+ stat_smooth(method="lm")
print(ww)
#p + scale_x_date(limits = c(min, max))
ww=w+scale_x_date(date_labels = "%Y",date_breaks="year",limits = c(min, max))+labs(title = "Ratio",x="Years",y="")+scale_y_continuous(limits=c(0,450))#+ stat_smooth(method="lm")
print(ww)
source('C:/Dropbox/workspace/RProjects/PlantAudit/VIL/energyaudit.R')
source('C:/Dropbox/workspace/RProjects/PlantAudit/VIL/energyaudit.R')
source('E:/ETH/ETH-02082011/1-Rmarkov/markovgiventheta.R')
library(DBI)
library(RODBC)
library(RMySQL)
library(xts)
library(ggplot2)
library(hydroTSM) #call the hydrology package for time series analysis
dataproduction = dbConnect(MySQL(), user='root', password='', dbname='maynilad_asv', host='localhost')
dbListTables(dataproduction)
dbListFields(dataproduction, 'analysisdate')
library(rattle)
rattle()
library(lattice)
library(nutshell)
install.packages("nutshell")
data(births2006.smpl)
data(births2006.smpl)
data(births2006)
library(nutshell)
data(births2006)
data(births2006.smpl)
births2006.smpl[1:5,]
View(births2006.smpl)
dim(births2006.smpl)
births.dow=table(births2006.smpl$DOB_WK)
births.dow
barchart(births.dow,ylab="Day of Week",col="black")
births2006.smpl$DOB_WK
dob.dm.tbl=table(WK=births2006.smpl$DOB_WK,
+ MM=births2006.smpl$DMETH_REC)
dob.dm.tbl=table(WK=births2006.smpl$DOB_WK,
MM=births2006.smpl$DMETH_REC)
dob.dm.tbl
dob.dm.tbl=dob.dm.tbl[,-2]
dob.dm.tbl
trellis.device()
barchart(dob.dm.tbl,ylab="Day of Week")
xlab="Day of Week",col="black")barchart(dob.dm.tbl,horizontal=FALSE,groups=FALSE,
xlab="Day of Week",col="black")barchart(dob.dm.tbl,horizontal=FALSE,groups=FALSE,xlab="Day of Week",col="black")
barchart(dob.dm.tbl,horizontal=FALSE,groups=FALSE,xlab="Day of Week",col="black")
7*38
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
source('C:/Dropbox/workspace/RProjects/BusinessAnalytics/birth_statistic.R')
library(lattice)
library(nutshell)
data(births2006.smpl)
births2006.smpl[1:5,]
births.dow=table(births2006.smpl$DOB_WK)
#print(births.dow)
births.dow
barchart(births.dow,ylab="Day of Week",col="black")
dob.dm.tbl=table(WK=births2006.smpl$DOB_WK,MM=births2006.smpl$DMETH_REC)
dob.dm.tbl
dob.dm.tbl=table(a=births2006.smpl$DOB_WK,MM=births2006.smpl$DMETH_REC)
dob.dm.tbl
source('C:/Dropbox/workspace/RProjects/BusinessAnalytics/birth_statistic.R')
library(lattice)
library(nutshell)
data(births2006.smpl)
births2006.smpl[1:5,]
births.dow=table(births2006.smpl$DOB_WK)
#print(births.dow)
births.dow
barchart(births.dow,ylab="Day of Week",col="black")
dob.dm.tbl=table(WK=births2006.smpl$DOB_WK,MM=births2006.smpl$DMETH_REC)
dob.dm.tbl
source('C:/Dropbox/workspace/RProjects/BusinessAnalytics/birth_statistic.R')
dob.dm.tbl=dob.dm.tbl[,-2]
dob.dm.tbl
dob.dm.tbl=dob.dm.tbl[,-1]
dob.dm.tbl
dob.dm.tbl=dob.dm.tbl[,-3]
dob.dm.tbl=dob.dm.tbl[,-2]
dob.dm.tbl
dob.dm.tbl=table(WK=births2006.smpl$DOB_WK,MM=births2006.smpl$DMETH_REC)
dob.dm.tbl
dob.dm.tbl=dob.dm.tbl[,-1]
dob.dm.tbl
dob.dm.tbl=table(WK=births2006.smpl$DOB_WK,MM=births2006.smpl$DMETH_REC)
dob.dm.tbl
dob.dm.tbl=dob.dm.tbl[,-1]
dob.dm.tbl
dob.dm.tbl=table(WK=births2006.smpl$DOB_WK,MM=births2006.smpl$DPLURAL)
dob.dm.tbl
dob.dm.tbl=table(WK=births2006.smpl$DOB_WK,MM=births2006.smpl$DMETH_REC)
dob.dm.tbl
dob.dm.tbl=dob.dm.tbl[,-2]
dob.dm.tbl
trellis.device()
barchart(dob.dm.tbl,ylab="Day of Week")
barchart(dob.dm.tbl,horizontal=FALSE,groups=FALSE, xlab="Day of Week",col="black")
barchart(dob.dm.tbl,ylab="Day of Week")
barchart(dob.dm.tbl,horizontal=FALSE,groups=FALSE, xlab="Day of Week",col="black")
dob.dm.tbl
barchart(dob.dm.tbl,ylab="Day of Week")
dob.dm.tbl=table(WK=births2006.smpl$DOB_WK,MM=births2006.smpl$DMETH_REC)
barchart(dob.dm.tbl,ylab="Day of Week")
barchart(dob.dm.tbl,horizontal=FALSE,groups=FALSE, xlab="Day of Week",col="black")
barchart(dob.dm.tbl,ylab="Day of Week")
dob.dm.tbl=dob.dm.tbl[,-2]
dob.dm.tbl
trellis.device()
barchart(dob.dm.tbl,ylab="Day of Week")
barchart(dob.dm.tbl,ylab="Day of Week")
dob.dm.tbl=dob.dm.tbl[,-2]
dob.dm.tbl
dob.dm.tbl=table(WK=births2006.smpl$DOB_WK,MM=births2006.smpl$DMETH_REC)
dob.dm.tbl
dob.dm.tbl=dob.dm.tbl[,-2]
dob.dm.tbl
trellis.device()
barchart(dob.dm.tbl,ylab="Day of Week")
barchart(dob.dm.tbl,ylab="Day of Week")
trellis.device()
barchart(dob.dm.tbl,ylab="Day of Week")
barchart(dob.dm.tbl,horizontal=FALSE,groups=FALSE, xlab="Day of Week",col="black")
barchart(dob.dm.tbl,horizontal=T,groups=FALSE, xlab="Day of Week",col="black")
barchart(dob.dm.tbl,horizontal=F,groups=FALSE, xlab="Day of Week",col="black")
histogram(~DBWT|DPLURAL,data=births2006.smpl,layout=c(1,5), col="black")
histogram(~MAGER|DPLURAL,data=births2006.smpl,layout=c(1,5), col="black")
histogram(~DOB_MM|DPLURAL,data=births2006.smpl,layout=c(1,5), col="black")
histogram(~DBWT|DPLURAL,data=births2006.smpl,layout=c(1,5), col="black")
histogram(~DBWT|DMETH_REC,data=births2006.smpl,layout=c(1,3), col="black")
densityplot(~DBWT|DPLURAL,data=births2006.smpl,layout=c(1,5), plot.points=FALSE,col="black")
densityplot(~DBWT,groups=DPLURAL,data=births2006.smpl, plot.points=FALSE)
densityplot(~DBWT|DPLURAL,data=births2006.smpl,layout=c(1,5), plot.points=FALSE,col="black")
dotplot(~DBWT|DPLURAL,data=births2006.smpl,layout=c(1,5), plot.points=FALSE,col="black")
#trellis.device()
barchart(dob.dm.tbl,ylab="Day of Week")
barchart(dob.dm.tbl,horizontal=F,groups=FALSE, xlab="Day of Week",col="black")
histogram(~DBWT|DPLURAL,data=births2006.smpl,layout=c(1,5), col="black")
histogram(~DBWT|DMETH_REC,data=births2006.smpl,layout=c(1,3), col="black")
densityplot(~DBWT|DPLURAL,data=births2006.smpl,layout=c(1,5), plot.points=FALSE,col="black")
densityplot(~DBWT,groups=DPLURAL,data=births2006.smpl, plot.points=FALSE)
dotplot(~DBWT|DPLURAL,data=births2006.smpl,layout=c(1,5), plot.points=FALSE,col="black")
xyplot(DBWT~DOB_WK,data=births2006.smpl,col="black")
xyplot(DBWT~DOB_WK,data=births2006.smpl,col="black")
trellis.device()
xyplot(DBWT~DOB_WK,data=births2006.smpl,col="black")
xyplot(DBWT~DOB_WK|DPLURAL,data=births2006.smpl,layout=c(1,5), col="black")
xyplot(DBWT~WTGAIN,data=births2006.smpl,col="black")
xyplot(DBWT~WTGAIN|DPLURAL,data=births2006.smpl,layout=c(1,5), col="black")
smoothScatter(births2006.smpl$WTGAIN,births2006.smpl$DBWT)
## boxplot is the command for a box plot in the standard graphics
## package
boxplot(DBWT~APGAR5,data=births2006.smpl,ylab="DBWT", xlab="AGPAR5")
bwplot(DBWT~factor(DOB_WK),data=births2006.smpl,
xlab="Day of Week")
boxplot(DBWT~DOB_WK,data=births2006.smpl,ylab="DBWT", xlab="Day of Week")
## bwplot is the command for a box plot in the lattice graphics
## package. There you need to declare the conditioning variables
## as factors
bwplot(DBWT~factor(APGAR5)|factor(SEX),data=births2006.smpl,
xlab="AGPAR5")
bwplot(DBWT~factor(DOB_WK),data=births2006.smpl,
xlab="Day of Week")
fac=factor(births2006.smpl$DPLURAL)
res=births2006.smpl$DBWT
t4=tapply(res,fac,mean,na.rm=TRUE)
t4
fac
t5=tapply(births2006.smpl$DBWT,INDEX=list(births2006.smpl$DPLURAL,
births2006.smpl$SEX),FUN=mean,na.rm=TRUE)
t5
barplot(t4,ylab="DBWT")
barplot(t5,beside=TRUE,ylab="DBWT")
t5=table(births2006.smpl$ESTGEST)
t5
new=births2006.smpl[births2006.smpl$ESTGEST != 99,]
new
new
t51=table(new$ESTGEST)
t51
t6=tapply(new$DBWT,INDEX=list(cut(new$WTGAIN,breaks=10),
cut(new$ESTGEST,breaks=10)),FUN=mean,na.rm=TRUE)
t6
levelplot(t6,scales = list(x = list(rot = 90)))
contourplot(t6,scales = list(x = list(rot = 90)))
5*365*24/3016
5*365*24/3857
5*365*24/3534
library(lattice)
library(nutshell)
data(births2006.smpl)
births2006.smpl[1:5,]
births.dow=table(births2006.smpl$DOB_WK)
#print(births.dow)
births.dow
barchart(births.dow,ylab="Day of Week",col="black")
dob.dm.tbl=table(WK=births2006.smpl$DOB_WK,MM=births2006.smpl$DMETH_REC)
dob.dm.tbl
dob.dm.tbl=dob.dm.tbl[,-2]
dob.dm.tbl
trellis.device()
barchart(dob.dm.tbl,ylab="Day of Week")
library(lattice)
library(nutshell)
data(births2006.smpl)
births2006.smpl[1:5,]
data(births2006.smpl)
births2006.smpl[1:5,]
library("devtools")
install.packages("devtools")
library("devtools")
install_github("ropensci/plotly")
install.packages("RWordPress")
153000/53
install.packages("RemixAutoML")
library(RemixAutoML)
library(data.table)
library(devtools)
# No Remotes ----
# Attachments ----
to_install <- c("catboost", "caTools", "data.table", "doParallel", "foreach", "forecast", "ggplot2", "h2o", "itertools", "lubridate", "monreg", "pROC", "RColorBrewer", "recommenderlab", "ROCR", "scatterplot3d", "stringr", "tm", "tsoutliers", "wordcloud", "xgboost", "zoo")
for (i in to_install) {
message(paste("looking for ", i))
if(i == "catboost" & !requireNamespace(i)) {
devtools::install_github('catboost/catboost', subdir = 'catboost/R-package')
} else if(i == "h2o" & !requireNamespace(i)) {
if ("package:h2o" %in% search()) { detach("package:h2o", unload=TRUE) }
if ("h2o" %in% rownames(installed.packages())) { remove.packages("h2o") }
pkgs <- c("RCurl","jsonlite")
for (pkg in pkgs) {
if (! (pkg %in% rownames(installed.packages()))) { install.packages(pkg) }
}
install.packages("h2o", type="source", repos="https://h2o-release.s3.amazonaws.com/h2o/rel-yates/3/R")
} else if (!requireNamespace(i)) {
message(paste("     installing", i))
install.packages(i)
}
}
install.packages("catboost")
install.packages("installr")
library(installr)
install.packages("chartbookR")
library(devtools)
install_github("kilianreber/chartbookR")
zoo <- getBBG(tickers=c("USMMMANU", "PRODMANO", "PRODMANH"), names=c("Employment", "Output", "Productivity"), freq="QUARTERLY", time="31Y")
zoo
library(zoo)
zoo <- getBBG(tickers=c("USMMMANU", "PRODMANO", "PRODMANH"), names=c("Employment", "Output", "Productivity"), freq="QUARTERLY", time="31Y")
library(chartbookR)
library(chartbookR)
install.packages("Rtools")
library(Rtools)
install.packages("Rtools")
1200000/53
# Create mock data
month_range <- -2:3
df <- data.frame()
df
for (r in month_range){
g1 <- sample(3:8,1)
g2 <- sample(3:15,1)
g3 <- sample(3:12,1)
group <- data.frame(Group = c(rep("G1",g1), rep("G2", g2), rep("G3", g3)))
month <- data.frame(Month = c(rep(floor_date(today() %m+% months(r), "month"), sum(g1, g2, g3))))
set <- data.frame(Group = group, Month = month)
df <- rbind(df, set)
}
install.packages("FinancialInstrument")
library(FinancialInstrument)
for (r in month_range){
g1 <- sample(3:8,1)
g2 <- sample(3:15,1)
g3 <- sample(3:12,1)
group <- data.frame(Group = c(rep("G1",g1), rep("G2", g2), rep("G3", g3)))
month <- data.frame(Month = c(rep(floor_date(today() %m+% months(r), "month"), sum(g1, g2, g3))))
set <- data.frame(Group = group, Month = month)
df <- rbind(df, set)
}
install.packages("lubridate")
library()
library(lubridate)
for (r in month_range){
g1 <- sample(3:8,1)
g2 <- sample(3:15,1)
g3 <- sample(3:12,1)
group <- data.frame(Group = c(rep("G1",g1), rep("G2", g2), rep("G3", g3)))
month <- data.frame(Month = c(rep(floor_date(today() %m+% months(r), "month"), sum(g1, g2, g3))))
set <- data.frame(Group = group, Month = month)
df <- rbind(df, set)
}
df
View(df)
2750*(1.12)
2750*(1.12)*0.8
130000+2750*(1.12)
130000-2750*(1.12)
5000000*0.08/12
setwd("C:/Dropbox/workspace/RProjects/BusinessAnalytics/EVM")
source('C:/Dropbox/workspace/RProjects/BusinessAnalytics/EVM/main.R')
source('C:/Dropbox/workspace/RProjects/BusinessAnalytics/EVM/main.R')
source('C:/Dropbox/workspace/RProjects/BusinessAnalytics/EVM/main.R')
source('C:/Dropbox/workspace/RProjects/BusinessAnalytics/EVM/main.R')
